name: Log release to Notion

env:
  OPENAI_ENABLED: false
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

on:
  pull_request:
    types: [closed]

jobs:
  notion-log:
    if: |
      github.event.pull_request.merged == true &&
      (
        github.event.pull_request.base.ref == 'main' ||
        github.event.pull_request.base.ref == 'prod_new'
      )
    runs-on: ubuntu-latest
    env:
      NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
      NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare variables & functions
        env:
          PR_NUMBER:       ${{ github.event.pull_request.number }}
          PR_URL:          ${{ github.event.pull_request.html_url }}
          BASE_BRANCH:     ${{ github.event.pull_request.base.ref }}
          MERGED_AT_RAW:   ${{ github.event.pull_request.merged_at }}
          OPENAI_ENABLED:  ${{ env.OPENAI_ENABLED }}
          OPENAI_API_KEY:  ${{ env.OPENAI_API_KEY }}
        run: |
          set -euo pipefail

          # date formatting (strip quotes if any)
          CLEAN_DATE=${MERGED_AT_RAW%\"}
          CLEAN_DATE=${CLEAN_DATE#\"}
          FORMATTED_DATE=$(date -d "$CLEAN_DATE" '+%Y-%m-%d')
          echo "MERGED_AT=$FORMATTED_DATE" >> $GITHUB_ENV

          # Preserve existing fields
          echo "REPO=${{ github.repository }}"       >> $GITHUB_ENV
          echo "TESTED_ANDROID=false"                >> $GITHUB_ENV
          echo "STATUS=Deploying"                    >> $GITHUB_ENV

          # our PR info
          echo "PR_NUMBER=$PR_NUMBER"                >> $GITHUB_ENV
          echo "PR_URL=$PR_URL"                      >> $GITHUB_ENV
          echo "BASE_BRANCH=$BASE_BRANCH"            >> $GITHUB_ENV
          echo "COMMIT_RANGE=$(git merge-base origin/${BASE_BRANCH} HEAD)..HEAD" >> $GITHUB_ENV

          # OpenAI summary if enabled
          if [ "$OPENAI_ENABLED" = "true" ]; then
            MESSAGES=$(git --no-pager log --format='%s' origin/${BASE_BRANCH}...HEAD)
            SUMMARY=$(curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "model": "gpt-4o-mini",
                "messages": [
                  { "role": "system", "content": "You are a helpful assistant." },
                  { "role": "user", "content": "Summarize the following commit messages in 40-50 words, point wise:\n\n'"$MESSAGES"'\n" }
                ]
              }' | jq -r '.choices[0].message.content')
            echo "SUMMARY=$SUMMARY" >> $GITHUB_ENV
          else
            echo "SUMMARY=" >> $GITHUB_ENV
          fi

          # Environment flag (unchanged)
          if [ "$BASE_BRANCH" = "main" ]; then
            echo "ENVIRONMENT=Staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=Production" >> $GITHUB_ENV
          fi

      - name: Post to Notion via curl
        run: |
          curl -sSL \
            -X POST https://api.notion.com/v1/pages \
            -H "Authorization: Bearer $NOTION_TOKEN" \
            -H "Notion-Version: 2022-06-28" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "parent": { "database_id": "$NOTION_DATABASE_ID" },
            "properties": {
              "Version": {
                "title": [
                  { "text": { "content": "PR #$PR_NUMBER" } }
                ]
              },
              "Notes": {
                "rich_text": [
                  { "text": { "content": "$SUMMARY" } }
                ]
              },
              "PR Link": {
                "url": "$PR_URL"
              },
              "Date": {
                "date": { "start": "$MERGED_AT" }
              },
              "Environment": {
                "select": { "name": "$ENVIRONMENT" }
              },
              "Repo": {
                "rich_text": [
                  { "text": { "content": "$REPO" } }
                ]
              },
              "Tested in Android?": {
                "checkbox": $TESTED_ANDROID
              },
              "Status": {
                "status": { "name": "$STATUS" }
              }
            }
          }
          EOF
